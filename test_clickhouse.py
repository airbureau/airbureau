import sys
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.clickhouse_client import ClickHouseClient


def test_connection():
    try:
        print("üîÑ Testing ClickHouse connection...")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        ch = ClickHouseClient()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é
        result = ch.execute("SELECT version()")
        print(f"‚úÖ ClickHouse version: {result[0][0]}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        result = ch.execute("SELECT currentDatabase()")
        print(f"‚úÖ Current database: {result[0][0]}")

        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –∏ –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        print("üîÑ Testing basic operations...")

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å 2 –∫–æ–ª–æ–Ω–∫–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
        ch.create_table("test_temp", """
            id Int32,
            name String
        """)

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (2 –∑–Ω–∞—á–µ–Ω–∏—è - id –∏ name)
        test_data = [
            (1, 'test_1'),
            (2, 'test_2'),
            (3, 'test_3')
        ]
        ch.insert_data("test_temp", test_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤—Å—Ç–∞–≤–∏–ª–∏—Å—å
        result = ch.execute("SELECT COUNT(*) FROM test_temp")
        print(f"‚úÖ Test table contains {result[0][0]} rows")

        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        result = ch.execute("SELECT * FROM test_temp ORDER BY id")
        print("‚úÖ Test data:")
        for row in result:
            print(f"   {row}")

        # –£–±–∏—Ä–∞–µ–º –∑–∞ —Å–æ–±–æ–π
        ch.execute("DROP TABLE test_temp")
        print("‚úÖ Cleanup completed")

        print("üéâ ALL TESTS PASSED! ClickHouse integration is working!")
        return True

    except Exception as e:
        print(f"‚ùå Connection failed: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    test_connection()