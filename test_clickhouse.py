import sys
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.clickhouse_client import ClickHouseClient


def test_connection():
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_vars = ['CLICKHOUSE_HOST', 'CLICKHOUSE_USER', 'CLICKHOUSE_PASSWORD', 'CLICKHOUSE_DB']
        missing_vars = [var for var in required_vars if not os.getenv(var)]

        if missing_vars:
            print(f"‚ùå Missing environment variables: {missing_vars}")
            print("üí° Make sure .env file exists and contains all required variables")
            return False

        print("‚úÖ Environment variables found")
        print(f"   Host: {os.getenv('CLICKHOUSE_HOST')}")
        print(f"   User: {os.getenv('CLICKHOUSE_USER')}")
        print(f"   Database: {os.getenv('CLICKHOUSE_DB')}")
        print(f"   Port: {os.getenv('CLICKHOUSE_PORT', 9440)}")

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        print("üîÑ Testing ClickHouse connection...")
        ch = ClickHouseClient()
        result = ch.execute("SELECT version()")
        print(f"‚úÖ ClickHouse version: {result[0][0]}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        print("üîÑ Testing table creation...")
        test_table_schema = """
            id Int32,
            test_string String,
            created_at DateTime DEFAULT now()
        """
        ch.create_table("test_connection", test_table_schema)

        # –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        print("üîÑ Testing data insertion...")
        test_data = [(1, 'test_value_1'), (2, 'test_value_2')]
        ch.insert_data("test_connection", test_data)

        # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        print("üîÑ Testing data reading...")
        result = ch.execute("SELECT COUNT(*) FROM test_connection")
        print(f"‚úÖ Test table contains {result[0][0]} rows")

        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
        ch.execute("DROP TABLE IF EXISTS test_connection")
        print("‚úÖ Cleanup completed")

        return True

    except Exception as e:
        print(f"‚ùå Connection failed: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    test_connection()