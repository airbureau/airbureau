import sys
import os
from datetime import datetime
from time import sleep
import requests
from pybit.unified_trading import WebSocket

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from dotenv import load_dotenv

load_dotenv()

from utils.clickhouse_client import ClickHouseClient


class LinearTickerStreamer:
    def __init__(self):
        self.ch_client = ClickHouseClient()
        self.ws = None
        self.setup_tables()

    def setup_tables(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è linear —Ç–∏–∫–µ—Ä–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        table_schema = """
            `event_time` DateTime64(3),
            `receive_time` DateTime64(3),
            `insert_time` DateTime64(3) DEFAULT now64(),
            `symbol` String,
            `tick_direction` String,
            `last_price` Float64,
            `prev_price_24h` Float64,
            `price_24h_pcnt` Float64,
            `high_price_24h` Float64,
            `low_price_24h` Float64,
            `prev_price_1h` Float64,
            `mark_price` Float64,
            `index_price` Float64,
            `open_interest` Float64,
            `open_interest_value` Float64,
            `turnover_24h` Float64,
            `volume_24h` Float64,
            `funding_rate` Float64,
            `next_funding_time` DateTime64(3),
            `bid1_price` Float64,
            `bid1_size` Float64,
            `ask1_price` Float64,
            `ask1_size` Float64,
            INDEX idx_symbol_event (symbol, event_time) TYPE minmax GRANULARITY 3
        """
        self.ch_client.create_table("bybit_tickers_linear", table_schema)
        print("‚úÖ Linear tickers table ready")

    def handle_linear_ticker(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ linear —Ç–∏–∫–µ—Ä–æ–≤"""
        try:
            data = message.get('data', {})
            if not data:
                return

            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            event_time = datetime.fromtimestamp(int(data.get('ts', 0)) / 1000) if data.get('ts') else datetime.now()
            receive_time = datetime.now()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ next_funding_time
            next_funding_time = None
            if data.get('nextFundingTime'):
                try:
                    next_funding_time = datetime.fromtimestamp(int(data['nextFundingTime']) / 1000)
                except:
                    next_funding_time = None

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            record = (
                event_time,
                receive_time,
                data.get('symbol'),
                data.get('tickDirection', ''),
                float(data.get('lastPrice', 0)),
                float(data.get('prevPrice24h', 0)),
                float(data.get('price24hPcnt', 0)),
                float(data.get('highPrice24h', 0)),
                float(data.get('lowPrice24h', 0)),
                float(data.get('prevPrice1h', 0)),
                float(data.get('markPrice', 0)),
                float(data.get('indexPrice', 0)),
                float(data.get('openInterest', 0)),
                float(data.get('openInterestValue', 0)),
                float(data.get('turnover24h', 0)),
                float(data.get('volume24h', 0)),
                float(data.get('fundingRate', 0)),
                next_funding_time,
                float(data.get('bid1Price', 0)),
                float(data.get('bid1Size', 0)),
                float(data.get('ask1Price', 0)),
                float(data.get('ask1Size', 0))
            )

            # –í—Å—Ç–∞–≤–∫–∞ –≤ ClickHouse
            self.ch_client.insert_data("bybit_tickers_linear", [record])
            print(f"üìä Linear: {data.get('symbol')} - {data.get('lastPrice')}")

        except Exception as e:
            print(f"‚ùå Error processing linear ticker: {e}")

    def get_linear_symbols(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö linear –ø–∞—Ä USDT"""
        url = "https://api.bybit.com/v5/market/instruments-info"
        try:
            response = requests.get(url, params={'category': 'linear'})
            data = response.json().get('result', {}).get('list', [])
            symbols = [s['symbol'] for s in data
                       if s.get('quoteCoin') == 'USDT'
                       and s.get('status') == 'Trading']
            print(f"‚úÖ Found {len(symbols)} linear trading pairs")
            return symbols
        except Exception as e:
            print(f"‚ùå Error fetching linear symbols: {e}")
            return []

    def subscribe_all_linear(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ linear –ø–∞—Ä—ã —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏"""
        symbols = self.get_linear_symbols()
        if not symbols:
            print("‚ùå No symbols found for subscription")
            return

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏ (21000 —Å–∏–º–≤–æ–ª–æ–≤)
        max_length = 21000
        current_group = []
        current_length = 0

        for symbol in symbols:
            symbol_length = len(symbol) + 1  # +1 –¥–ª—è –∑–∞–ø—è—Ç–æ–π

            if current_length + symbol_length > max_length and current_group:
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
                self.subscribe_to_group(current_group)
                current_group = []
                current_length = 0

            current_group.append(symbol)
            current_length += symbol_length

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        if current_group:
            self.subscribe_to_group(current_group)

    def subscribe_to_group(self, symbols):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ ticker_stream –¥–ª—è linear
            self.ws.ticker_stream(
                symbol=symbols,
                callback=self.handle_linear_ticker
            )
            print(f"‚úÖ Subscribed to {len(symbols)} linear symbols")
            sleep(0.3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        except Exception as e:
            print(f"‚ùå Error subscribing to linear group: {e}")

    def start_streaming(self):
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ linear —Ç–∏–∫–µ—Ä–æ–≤"""
        print("üöÄ Starting linear ticker streamer...")

        self.ws = WebSocket(
            testnet=False,
            channel_type="linear"
        )

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –ø–∞—Ä—ã
        self.subscribe_all_linear()

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            while True:
                sleep(1)
        except KeyboardInterrupt:
            print("‚èπÔ∏è Stopping linear ticker streamer...")
        except Exception as e:
            print(f"‚ùå Linear streamer error: {e}")


def main():
    streamer = LinearTickerStreamer()
    streamer.start_streaming()


if __name__ == '__main__':
    main()