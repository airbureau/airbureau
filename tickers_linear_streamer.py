import sys
import os
from datetime import datetime
from time import sleep
import requests
from pybit.unified_trading import WebSocket

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from dotenv import load_dotenv

load_dotenv()

from utils.clickhouse_client import ClickHouseClient
from bot import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞


class LinearTickerStreamer:
    def __init__(self):
        self.ch_client = ClickHouseClient()
        self.ws = None

        # üî• –ó–ê–ü–£–°–ö–ê–ï–ú –ë–û–¢–ê –ü–†–Ø–ú–û –ó–î–ï–°–¨!
        bot.start()
        print("‚úÖ Telegram Bot integrated")


    def safe_float(self, value, default=0.0):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ float"""
        if value is None or value == '':
            return default
        try:
            return float(value)
        except (ValueError, TypeError):
            return default

    def safe_timestamp(self, ts_value):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ timestamp"""
        if not ts_value:
            return datetime.now()
        try:
            return datetime.fromtimestamp(int(ts_value) / 1000)
        except (ValueError, TypeError):
            return datetime.now()

    def safe_datetime(self, dt_value):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ datetime —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π None"""
        if not dt_value or dt_value == '':
            return None
        try:
            return datetime.fromtimestamp(int(dt_value) / 1000)
        except (ValueError, TypeError):
            return None

    def handle_linear_ticker(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ linear —Ç–∏–∫–µ—Ä–æ–≤"""
        try:
            data = message.get('data', {})
            if not data:
                return

            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            event_time = self.safe_timestamp(data.get('ts'))
            receive_time = datetime.now()

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ next_funding_time - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ None
            next_funding_time = self.safe_datetime(data.get('nextFundingTime'))

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ - 22 –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è 22 –∫–æ–ª–æ–Ω–æ–∫
            record = (
                event_time,  # event_time
                receive_time,  # receive_time
                data.get('symbol', ''),  # symbol
                data.get('tickDirection', ''),  # tick_direction
                self.safe_float(data.get('lastPrice')),  # last_price
                self.safe_float(data.get('prevPrice24h')),  # prev_price_24h
                self.safe_float(data.get('price24hPcnt')),  # price_24h_pcnt
                self.safe_float(data.get('highPrice24h')),  # high_price_24h
                self.safe_float(data.get('lowPrice24h')),  # low_price_24h
                self.safe_float(data.get('prevPrice1h')),  # prev_price_1h
                self.safe_float(data.get('markPrice')),  # mark_price
                self.safe_float(data.get('indexPrice')),  # index_price
                self.safe_float(data.get('openInterest')),  # open_interest
                self.safe_float(data.get('openInterestValue')),  # open_interest_value
                self.safe_float(data.get('turnover24h')),  # turnover_24h
                self.safe_float(data.get('volume24h')),  # volume_24h
                self.safe_float(data.get('fundingRate')),  # funding_rate
                next_funding_time,  # next_funding_time (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
                self.safe_float(data.get('bid1Price')),  # bid1_price
                self.safe_float(data.get('bid1Size')),  # bid1_size
                self.safe_float(data.get('ask1Price')),  # ask1_price
                self.safe_float(data.get('ask1Size'))  # ask1_size
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∑–∞–ø–∏—Å–∏
            if len(record) != 22:
                print(f"‚ö†Ô∏è Warning: Record length is {len(record)}, expected 22")
                return

            # –í—Å—Ç–∞–≤–∫–∞ –≤ ClickHouse –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
            self.ch_client.insert_data("bybit_tickers_linear", [record])
            # print(f"üìä Linear: {data.get('symbol')} - {data.get('lastPrice')}")

        except Exception as e:
            print(f"‚ùå Error processing linear ticker: {e}")
            print(f"   Data: {data}")
            # üî• –û–¢–ü–†–ê–í–ö–ê –û–®–ò–ë–ö–ò
            bot.send_alert("ERROR", f"–û—à–∏–±–∫–∞ –≤ —Ç–∏–∫–µ—Ä–µ: {e}")

    def get_linear_symbols(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö linear –ø–∞—Ä USDT"""
        url = "https://api.bybit.com/v5/market/instruments-info"
        try:
            response = requests.get(url, params={'category': 'linear'})
            data = response.json().get('result', {}).get('list', [])
            symbols = [s['symbol'] for s in data
                       if s.get('quoteCoin') == 'USDT'
                       and s.get('status') == 'Trading']
            print(f"‚úÖ Found {len(symbols)} linear trading pairs")
            return symbols
        except Exception as e:
            print(f"‚ùå Error fetching linear symbols: {e}")
            return []

    def subscribe_all_linear(self):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ linear –ø–∞—Ä—ã —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏"""
        symbols = self.get_linear_symbols()
        if not symbols:
            print("‚ùå No symbols found for subscription")
            return

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞ –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫–∏ (21000 —Å–∏–º–≤–æ–ª–æ–≤)
        max_length = 21000
        current_group = []
        current_length = 0

        for symbol in symbols:
            symbol_length = len(symbol) + 1  # +1 –¥–ª—è –∑–∞–ø—è—Ç–æ–π

            if current_length + symbol_length > max_length and current_group:
                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É
                self.subscribe_to_group(current_group)
                current_group = []
                current_length = 0

            current_group.append(symbol)
            current_length += symbol_length

        # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
        if current_group:
            self.subscribe_to_group(current_group)

    def subscribe_to_group(self, symbols):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É —Å–∏–º–≤–æ–ª–æ–≤"""
        try:
            self.ws.ticker_stream(
                symbol=symbols,
                callback=self.handle_linear_ticker
            )
            print(f"‚úÖ Subscribed to {len(symbols)} linear symbols")
            sleep(0.3)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        except Exception as e:
            print(f"‚ùå Error subscribing to linear group: {e}")

    def start_streaming(self):
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ linear —Ç–∏–∫–µ—Ä–æ–≤"""
        print("üöÄ Starting linear ticker streamer...")

        self.ws = WebSocket(
            testnet=False,
            channel_type="linear"
        )

        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ –ø–∞—Ä—ã
        self.subscribe_all_linear()

        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        try:
            while True:
                sleep(1)
        except KeyboardInterrupt:
            print("‚èπÔ∏è Stopping linear ticker streamer...")
        except Exception as e:
            print(f"‚ùå Linear streamer error: {e}")


def main():
    streamer = LinearTickerStreamer()
    streamer.start_streaming()


if __name__ == '__main__':
    main()