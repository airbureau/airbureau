import os
import logging
from typing import Dict, List, Optional, Union
from datetime import datetime
import pandas as pd
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class TelegramBot:
    def __init__(self, token: str, admin_chat_ids: List[int] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞

        Args:
            token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
            admin_chat_ids: –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        """
        self.token = token
        self.admin_chat_ids = admin_chat_ids or []
        self.application = None
        self.bot = None

    async def initialize(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            self.application = Application.builder().token(self.token).build()
            self.bot = self.application.bot

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("stats", self.stats_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            self.application.add_handler(CommandHandler("alerts", self.alerts_command))
            self.application.add_handler(CommandHandler("balance", self.balance_command))
            self.application.add_handler(CommandHandler("help", self.help_command))

            logger.info("‚úÖ Telegram bot initialized successfully")
            return True
        except Exception as e:
            logger.error(f"‚ùå Error initializing bot: {e}")
            return False

    async def send_message(self,
                           chat_id: int,
                           text: str,
                           parse_mode: str = 'HTML',
                           disable_notification: bool = False) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç

        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ ('HTML', 'Markdown')
            disable_notification: –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode,
                disable_notification=disable_notification
            )
            return True
        except Exception as e:
            logger.error(f"‚ùå Error sending message: {e}")
            return False

    async def send_message_to_admins(self,
                                     text: str,
                                     parse_mode: str = 'HTML',
                                     disable_notification: bool = False) -> Dict[int, bool]:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

        Returns:
            Dict: {chat_id: success_status}
        """
        results = {}
        for chat_id in self.admin_chat_ids:
            results[chat_id] = await self.send_message(
                chat_id, text, parse_mode, disable_notification
            )
        return results

    async def broadcast_message(self,
                                chat_ids: List[int],
                                text: str,
                                parse_mode: str = 'HTML') -> Dict[int, bool]:
        """
        –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —á–∞—Ç–∞–º

        Returns:
            Dict: {chat_id: success_status}
        """
        results = {}
        for chat_id in chat_ids:
            results[chat_id] = await self.send_message(chat_id, text, parse_mode)
        return results

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
ü§ñ <b>Air Bureau Trading Bot</b>

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/alerts - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã
/balance - –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
/help - –ü–æ–º–æ—â—å

üìä <i>–ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ ClickHouse –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö</i>
        """
        await update.message.reply_text(welcome_text, parse_mode='HTML')

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ClickHouse –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats_text = """
üìà <b>–¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä: 15
‚Ä¢ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: 1,247
‚Ä¢ Win Rate: 64.3%

<b>–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:</b>
‚Ä¢ –°–¥–µ–ª–æ–∫: 42
‚Ä¢ PnL: +2.34%
‚Ä¢ –û–±—ä–µ–º: $124,567

<b>–¢–æ–ø –ø–∞—Ä—ã:</b>
1. BTCUSDT: +1.2%
2. ETHUSDT: +0.8%
3. SOLUSDT: +0.5%
            """
            await update.message.reply_text(stats_text, parse_mode='HTML')
        except Exception as e:
            await self.send_error(update, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        try:
            status_text = """
üü¢ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</b>

<b>–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b>
‚Ä¢ Bybit WebSocket: üü¢ –ê–∫—Ç–∏–≤–Ω–æ
‚Ä¢ ClickHouse DB: üü¢ –ê–∫—Ç–∏–≤–Ω–æ
‚Ä¢ Telegram Bot: üü¢ –ê–∫—Ç–∏–≤–Ω–æ

<b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 12—á 34–º
‚Ä¢ –ü–∞–º—è—Ç—å: 245 MB
‚Ä¢ CPU: 12%

<b>–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞:</b> 2024-01-15 14:30:25 UTC
            """
            await update.message.reply_text(status_text, parse_mode='HTML')
        except Exception as e:
            await self.send_error(update, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

    async def alerts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /alerts - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã"""
        try:
            alerts_text = """
üö® <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã</b>

<b>–°–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ 14:25: –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket
‚Ä¢ 13:45: –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª BTCUSDT
‚Ä¢ 12:30: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

<b>–í—á–µ—Ä–∞:</b>
‚Ä¢ 18:15: –î–µ–ø–ª–æ–π v1.2.3
‚Ä¢ 16:40: –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ 14:20: –û–±—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ 2.3—Å)
            """
            await update.message.reply_text(alerts_text, parse_mode='HTML')
        except Exception as e:
            await self.send_error(update, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")

    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance - —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        try:
            balance_text = """
üí∞ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>

<b>Bybit Main Account:</b>
‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: $15,247.89
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: $8,123.45
‚Ä¢ –í –æ—Ä–¥–µ—Ä–∞—Ö: $7,124.44
‚Ä¢ PnL —Å–µ–≥–æ–¥–Ω—è: +$234.56 (+1.54%)

<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>
‚Ä¢ USDT: 65.2%
‚Ä¢ BTC: 22.1%  
‚Ä¢ ETH: 8.7%
‚Ä¢ –î—Ä—É–≥–∏–µ: 4.0%

<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> 2024-01-15 14:28:10 UTC
            """
            await update.message.reply_text(balance_text, parse_mode='HTML')
        except Exception as e:
            await self.send_error(update, f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
/stats - –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
/alerts - –ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –∏ —Å–æ–±—ã—Ç–∏–π
/balance - –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

<b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –ë–æ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python + –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Telegram
‚Ä¢ –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ ClickHouse
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        """
        await update.message.reply_text(help_text, parse_mode='HTML')

    async def send_error(self, update: Update, error_msg: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        error_text = f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n{error_msg}"
        await update.message.reply_text(error_text, parse_mode='HTML')

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–æ–π
    async def send_alert(self,
                         alert_type: str,
                         message: str,
                         severity: str = "info") -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º

        Args:
            alert_type: –¢–∏–ø –∞–ª–µ—Ä—Ç–∞ (deploy, websocket, connection, trade, etc.)
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            severity: –£—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ (info, warning, error, critical)
        """
        severity_icons = {
            "info": "‚ÑπÔ∏è",
            "warning": "‚ö†Ô∏è",
            "error": "‚ùå",
            "critical": "üö®"
        }

        icon = severity_icons.get(severity, "üì¢")
        alert_text = f"""
{icon} <b>–ê–ª–µ—Ä—Ç: {alert_type.upper()}</b>

{message}

<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}
<b>–£—Ä–æ–≤–µ–Ω—å:</b> {severity.upper()}
        """

        return await self.send_message_to_admins(alert_text)

    async def send_trading_signal(self,
                                  symbol: str,
                                  signal_type: str,
                                  price: float,
                                  confidence: float = None,
                                  reason: str = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞

        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (BTCUSDT, ETHUSDT, etc.)
            signal_type: –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞ (BUY, SELL, HOLD)
            price: –¶–µ–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞
            confidence: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–∏–≥–Ω–∞–ª–µ (0-1)
            reason: –ü—Ä–∏—á–∏–Ω–∞ —Å–∏–≥–Ω–∞–ª–∞
        """
        signal_icons = {
            "BUY": "üü¢",
            "SELL": "üî¥",
            "HOLD": "üü°"
        }

        icon = signal_icons.get(signal_type, "üìä")

        signal_text = f"""
{icon} <b>–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª</b>

<b>–ü–∞—Ä–∞:</b> {symbol}
<b>–°–∏–≥–Ω–∞–ª:</b> {signal_type}
<b>–¶–µ–Ω–∞:</b> ${price:,.2f}
        """

        if confidence:
            signal_text += f"<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {confidence:.1%}\n"
        if reason:
            signal_text += f"<b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason}\n"

        signal_text += f"\n<b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S UTC')}"

        return await self.send_message_to_admins(signal_text)

    async def send_system_stats(self,
                                stats_data: Dict) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

        Args:
            stats_data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        """
        stats_text = """
üìä <b>–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

<b>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ –ù–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_percent}%
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_usage}
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}

<b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>
‚Ä¢ –ó–∞–ø–∏—Å–µ–π —Å–µ–≥–æ–¥–Ω—è: {records_today}
‚Ä¢ –†–∞–∑–º–µ—Ä –ë–î: {db_size}
‚Ä¢ –ó–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫: {qps}

<b>–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è:</b>
‚Ä¢ WebSocket: {ws_status}
‚Ä¢ API: {api_status}
        """.format(**stats_data)

        return await self.send_message_to_admins(stats_text)

    def run_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        try:
            logger.info("üîÑ Starting bot in polling mode...")
            self.application.run_polling()
        except Exception as e:
            logger.error(f"‚ùå Error in polling: {e}")

    async def run_webhook(self, webhook_url: str, port: int = 8443):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook"""
        try:
            await self.application.bot.set_webhook(webhook_url)
            logger.info(f"‚úÖ Webhook set to: {webhook_url}")
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ webhook —Å–µ—Ä–≤–µ—Ä–∞
        except Exception as e:
            logger.error(f"‚ùå Error setting webhook: {e}")


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
async def create_and_initialize_bot(token: str, admin_chat_ids: List[int] = None) -> TelegramBot:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞

    Args:
        token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        admin_chat_ids: –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    Returns:
        Initialized TelegramBot instance
    """
    bot = TelegramBot(token, admin_chat_ids)
    success = await bot.initialize()
    if success:
        return bot
    else:
        raise Exception("Failed to initialize Telegram bot")


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –∏ chat_id
    TOKEN = "your_telegram_bot_token"
    ADMIN_CHAT_IDS = [123456789]  # –í–∞—à chat_id

    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
        bot = await create_and_initialize_bot(TOKEN, ADMIN_CHAT_IDS)

        # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞
        await bot.send_alert(
            alert_type="websocket",
            message="–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit",
            severity="warning"
        )

        # –ü—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        await bot.send_trading_signal(
            symbol="BTCUSDT",
            signal_type="BUY",
            price=42500.50,
            confidence=0.85,
            reason="–ü—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"
        )

        # –ó–∞–ø—É—Å–∫ polling (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
        # bot.run_polling()

    except Exception as e:
        logger.error(f"‚ùå Error in main: {e}")


if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
    asyncio.run(main())