### 2. –°–û–ó–î–ê–ô–¢–ï –°–ö–†–ò–ü–¢ –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø
# !/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import os
import sys
import datetime
from pathlib import Path
import subprocess

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å Python
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def get_project_structure():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –≤–∏–¥–µ Markdown"""
    structure = []
    exclude_dirs = {'.git', '__pycache__', '.pytest_cache', 'venv', '.idea'}
    exclude_files = {'.env', '.gitignore'}

    for root, dirs, files in os.walk('.'):
        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        dirs[:] = [d for d in dirs if d not in exclude_dirs]

        level = root.count(os.sep) - 1
        indent = '  ' * level

        if level >= 0:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            dir_name = os.path.basename(root) if root != '.' else 'project-root'
            if dir_name and dir_name not in exclude_dirs:
                structure.append(f"{indent}üìÅ {dir_name}/")

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            subindent = '  ' * (level + 1)
            for file in files:
                if file not in exclude_files and not file.startswith('.'):
                    structure.append(f"{subindent}üìÑ {file}")

    return '\n'.join(structure)


def get_available_commands():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ run.py"""
    commands = [
        "| –ö–æ–º–∞–Ω–¥–∞ | –û–ø–∏—Å–∞–Ω–∏–µ |",
        "|---------|----------|",
        "| `python run.py` | –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è |",
        "| `python test_clickhouse.py` | –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î |",
        "| `python scripts/create_tables.py` | –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ ClickHouse |",
        "| `python scripts/test_trading_data.py` | –¢–µ—Å—Ç–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ |",
        "| `python scripts/analyze_data.py` | –ê–Ω–∞–ª–∏–∑ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö |",
        "| `python scripts/generate_docs.py` | –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ |"
    ]
    return '\n'.join(commands)


def get_clickhouse_tables():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü ClickHouse"""
    tables = [
        "| –¢–∞–±–ª–∏—Ü–∞ | –ö–æ–ª–æ–Ω–∫–∏ | –û–ø–∏—Å–∞–Ω–∏–µ |",
        "|---------|---------|-----------|",
        "| `trades` | timestamp, symbol, side, price, quantity, trade_id, strategy | –°–¥–µ–ª–∫–∏ |",
        "| `orders` | timestamp, symbol, order_type, side, price, quantity, status, order_id, strategy | –û—Ä–¥–µ—Ä–∞ |",
        "| `market_data` | timestamp, symbol, open, high, low, close, volume, timeframe | –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ |",
        "| `strategy_metrics` | timestamp, strategy, pnl, drawdown, sharpe_ratio, total_trades, winning_trades | –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π |"
    ]
    return '\n'.join(tables)


def get_troubleshooting():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–¥–µ–ª —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π"""
    troubleshooting = [
        "### üîß –ß–∞—Å—Ç—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è",
        "",
        "**–ü—Ä–æ–±–ª–µ–º–∞**: ClickHouse –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "```bash",
        "# –†–µ—à–µ–Ω–∏–µ:",
        "python test_clickhouse.py",
        "# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å .env —Ñ–∞–π–ª",
        "cat .env | grep CLICKHOUSE",
        "```",
        "",
        "**–ü—Ä–æ–±–ª–µ–º–∞**: GitHub Actions –¥–µ–ø–ª–æ–π",
        "- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å [Actions tab](https://github.com/airbureau/airbureau_bbt/actions)",
        "- –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ SSH –∫–ª—é—á –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ GitHub Secrets",
        "",
        "**–ü—Ä–æ–±–ª–µ–º–∞**: ModuleNotFoundError",
        "```bash",
        "# –†–µ—à–µ–Ω–∏–µ:",
        "source venv/bin/activate",
        "pip install -r requirements.txt",
        "```"
    ]
    return '\n'.join(troubleshooting)


def update_readme():
    """–û–±–Ω–æ–≤–ª—è–µ—Ç README.md —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    template_path = Path('README.md')

    if not template_path.exists():
        print("‚ùå README.md –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –ø–æ —à–∞–±–ª–æ–Ω—É –≤—ã—à–µ.")
        return False

    # –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω
    with open(template_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    replacements = {
        '{{LAST_UPDATE}}': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        '{{PROJECT_STRUCTURE}}': get_project_structure(),
        '{{AVAILABLE_COMMANDS}}': get_available_commands(),
        '{{CLICKHOUSE_TABLES}}': get_clickhouse_tables(),
        '{{TROUBLESHOOTING}}': get_troubleshooting()
    }

    for placeholder, value in replacements.items():
        content = content.replace(placeholder, value)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(template_path, 'w', encoding='utf-8') as f:
        f.write(content)

    print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    return True


def main():
    print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    if update_readme():
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º diff
        result = subprocess.run(['git', 'diff', 'README.md'], capture_output=True, text=True)
        if result.stdout:
            print("\nüìã –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:")
            print(result.stdout)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        print("\nüí° –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        print("git add README.md")
        print('git commit -m "docs: auto-update documentation"')
        print("git push origin main")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")


if __name__ == "__main__":
    main()