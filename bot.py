import os
import logging
from datetime import datetime
from telegram import Bot
from telegram.ext import Application, CommandHandler, ContextTypes
import threading

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class TelegramBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.admin_chat_ids = [int(x) for x in os.getenv('ADMIN_CHAT_IDS', '').split(',') if x]
        self.application = None
        self.bot_thread = None

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.token:
            logger.error("‚ùå TELEGRAM_BOT_TOKEN not found in environment")
            return

        if self.bot_thread and self.bot_thread.is_alive():
            return

        self.bot_thread = threading.Thread(target=self._run_bot, daemon=True)
        self.bot_thread.start()
        logger.info("‚úÖ Telegram Bot started in background thread")

    def _run_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            self.application = Application.builder().token(self.token).build()

            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self._start_cmd))
            self.application.add_handler(CommandHandler("stats", self._stats_cmd))
            self.application.add_handler(CommandHandler("status", self._status_cmd))
            self.application.add_handler(CommandHandler("balance", self._balance_cmd))
            self.application.add_handler(CommandHandler("help", self._help_cmd))

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            logger.info("üîÑ Starting bot polling...")
            self.application.run_polling()

        except Exception as e:
            logger.error(f"‚ùå Bot error: {e}")

    # –ö–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    def _start_cmd(self, update, context):
        update.message.reply_text("ü§ñ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")

    def _stats_cmd(self, update, context):
        update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...")

    def _status_cmd(self, update, context):
        update.message.reply_text("üü¢ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç")

    def _balance_cmd(self, update, context):
        update.message.reply_text("üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è...")

    def _help_cmd(self, update, context):
        help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
/stats - –¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞  
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/balance - –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
        """
        update.message.reply_text(help_text)

    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    def send_alert(self, alert_type: str, message: str):
        """–ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)"""
        try:
            if not self.token:
                logger.error("‚ùå Token not available for sending alert")
                return

            text = f"üö® {alert_type.upper()}\n{message}\n–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            temp_bot = Bot(self.token)
            for chat_id in self.admin_chat_ids:
                try:
                    temp_bot.send_message(chat_id=chat_id, text=text)
                    logger.info(f"‚úÖ Alert sent to {chat_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")

    def send_signal(self, symbol: str, action: str, price: float):
        """–ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            if not self.token:
                logger.error("‚ùå Token not available for sending signal")
                return

            text = f"üìà {symbol} {action} –ø–æ {price}\n–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}"

            temp_bot = Bot(self.token)
            for chat_id in self.admin_chat_ids:
                try:
                    temp_bot.send_message(chat_id=chat_id, text=text)
                    logger.info(f"‚úÖ Signal sent to {chat_id}")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = TelegramBot()